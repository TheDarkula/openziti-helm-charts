# temporary secret for the enrollment OTP
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "ziti-router.fullname" . }}-enrolment-jwt
  labels:
    {{- include "ziti-router.labels" . | nindent 4 }}
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace (print (include "ziti-router.fullname" . ) "-enrolment-jwt")) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  {{- $enrollmentJwt := (get $secretData "enrollmentJwt") | default (required "You must set .Values.enrollmentJwt to the edge routers enrolment token. Try adding --set-file enrollmentJwt=/tmp/router.jwt to your Helm command" .Values.enrollmentJwt | b64enc) }}
  # set the secret values..
  enrollmentJwt: {{ $enrollmentJwt | quote }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "ziti-router.fullname" . }}-identity
  labels:
    {{- include "ziti-router.labels" . | nindent 4 }}
  annotations:
    # "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace (print (include "ziti-router.fullname" . ) "-identity")) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set $adminPassword / adminuser to existing secret data or generate a random one when not exists
  {{ $secretData }}
