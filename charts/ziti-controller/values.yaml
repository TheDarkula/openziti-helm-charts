# Default values for ziti-controller.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This is the "main service" exposing the client API
# and the ctrl required for routers to connect.
# You usually want to expose both services. Except in your setup
# you have all (edge-)routers connecting from 'inside' your kubernetes
# infrastructure then you might have the main service internal only,
# enable the clientApi.service and expose only the client API
# to the outside (required for services / computers / users) to connect
# and find the router endpoints.

ctrlPlane:
  port: 6262
  service:
    enabled: true
    type: ClusterIP  # this can be cluster-internal unless there are routers outside the cluster
  issuer:
    kind: Issuer
    name: zt-issuer

clientApi:
  port: 1280
  service:
    enabled: true
    type: LoadBalancer  # this is the only service that really needs to be exposed

managementApi:
  port: 1281
  service:
    enabled: true
    type: ClusterIP  # this doesn't need to be exposed if you exclusively manage with ZAC also running in the same cluster

prometheus:
  enabled: true
  port: 9090
  service:
    enabled: true
    type: ClusterIP

ca:
  # Note: The renewBefore and duration fields must be specified using a Go
  # time.Duration string format, which does not allow the d (days) suffix.
  # You must specify these values using s, m, and h suffixes instead.
  # duration: 2160h # 90d
  # renewBefore: 360h # 15d
  duration: 87840h # 3660d / 10 y
  renewBefore: 720h # 30d

cert:
  # Note: The renewBefore and duration fields must be specified using a Go
  # time.Duration string format, which does not allow the d (days) suffix.
  # You must specify these values using s, m, and h suffixes instead.
  # TODO lower this value!
  # duration: 2160h   # 90d
  # renewBefore: 360h # 15d
  duration: 87840h    # 3660d / 10 y
  renewBefore: 720h   # 30d

image:
  repository: openziti/ziti-controller
  pullPolicy: Always
  # command: ["ziti", "controller", "run"]
  command: ["bash", "-c", "while true; do sleep 1; done"]
  # args: ["{{ .Values.configMountDir }}/{{ .Values.configFile }}", "--verbose"]

# a directory included in the init and run containers' executable search path
execMountDir:   /usr/local/bin   # read-only mountpoint for executables (must be in image's executable search PATH) 
# exec by init container
initScriptFile: ziti-controller-init.bash
# read-only mountpoint where configFile and various read-only identity dirs are projected
configMountDir: /etc/ziti
# filename of the controller configuration file
configFile:     ziti-controller.yaml
# writeable mountpoint where the controller will create dbFile during init
dataMountDir:   /persistent
dbFile:         ctrl.db
# read-only mountpoint for run container to read the ctrl plane trust bundle created during init
ctrlPlaneCaDir: ctrl-plane-cas
ctrlPlaneCasFile: ctrl-plane-cas.crt

nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 65534

securityContext: {}
  # capabilities:
  #   add:
  #     - NET_ADMIN

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}
#  kubernetes.io/role: master

tolerations: []
  # - key: node-role.kubernetes.io/master
  #   operator: Exists
  #   effect: NoSchedule

affinity: {}

mode: standalone
replicas: 1

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  annotations: {}

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim: ""

  ## minio data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  ## Storage class of PV to bind. By default it looks for standard storage class.
  ## If the PV uses a different storage class, specify that here.
  storageClass: ""
  VolumeName: ""
  accessMode: ReadWriteMany
  size: 2Gi
